version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-west-2
    AWS_ACCOUNT_ID: "850995572359"
    IMAGE_REPO_NAME: "terraform-app"
    IMAGE_TAG: "latest"
    ECS_CLUSTER_NAME: "terraform-cluster"
    ECS_SERVICE_NAME: "terraform-service"

phases:
  pre_build:
    commands:
      - echo Creating ECR repository if it doesn't exist...
      - aws ecr describe-repositories --repository-names $IMAGE_REPO_NAME || aws ecr create-repository --repository-name $IMAGE_REPO_NAME
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Creating ECS cluster if it doesn't exist...
      - aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME || aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd example-app
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Creating task definition...
      - |
        cat > task-definition.json << EOF
        {
          "family": "$ECS_SERVICE_NAME",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole",
          "containerDefinitions": [
            {
              "name": "$IMAGE_REPO_NAME",
              "image": "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/$ECS_SERVICE_NAME",
                  "awslogs-region": "$AWS_DEFAULT_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
      - echo Registering task definition...
      - aws ecs register-task-definition --cli-input-json file://task-definition.json
      - echo Creating or updating ECS service...
      - |
        if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --query 'services[0].serviceName' --output text | grep -q $ECS_SERVICE_NAME; then
          echo "Service exists, updating..."
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_SERVICE_NAME
        else
          echo "Creating new service..."
          aws ecs create-service --cluster $ECS_CLUSTER_NAME --service-name $ECS_SERVICE_NAME --task-definition $ECS_SERVICE_NAME --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-09cbfdbe5348810b8],securityGroups=[sg-0d91ad120aec3f1b9],assignPublicIp=ENABLED}"
        fi